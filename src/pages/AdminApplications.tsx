
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from "@/components/ui/pagination";
import { useToast } from "@/hooks/use-toast";
import { Search, Download, RefreshCw, Calendar, Users } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useQuery } from "@tanstack/react-query";
import * as XLSX from "xlsx";

interface ContactSubmission {
  id: string;
  first_name: string;
  last_name: string;
  email: string;
  telegram: string;
  phone: string;
  feedback: string | null;
  submitted_at: string;
}

const AdminApplications = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [dateFrom, setDateFrom] = useState("");
  const [dateTo, setDateTo] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 20;
  const { toast } = useToast();

  const { data: submissions = [], isLoading, refetch, error } = useQuery({
    queryKey: ['contact-submissions', searchTerm, dateFrom, dateTo, currentPage],
    queryFn: async () => {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { searchTerm, dateFrom, dateTo, currentPage });
      
      let query = supabase
        .from('contact_submissions')
        .select('*')
        .order('submitted_at', { ascending: false });

      console.log('üìä –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω');

      if (searchTerm) {
        console.log('üîé –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ:', searchTerm);
        query = query.or(`first_name.ilike.%${searchTerm}%,last_name.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`);
      }

      if (dateFrom) {
        console.log('üìÖ –§–∏–ª—å—Ç—Ä –æ—Ç –¥–∞—Ç—ã:', dateFrom);
        query = query.gte('submitted_at', dateFrom);
      }

      if (dateTo) {
        console.log('üìÖ –§–∏–ª—å—Ç—Ä –¥–æ –¥–∞—Ç—ã:', dateTo);
        query = query.lte('submitted_at', dateTo + 'T23:59:59');
      }

      const from = (currentPage - 1) * itemsPerPage;
      const to = from + itemsPerPage - 1;
      console.log('üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –æ—Ç', from, '–¥–æ', to);

      const { data, error } = await query.range(from, to);

      console.log('üì• –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:', { data, error });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫:', error);
        throw new Error(error.message);
      }

      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫:', data?.length || 0);
      return data as ContactSubmission[];
    },
  });

  const { data: totalCount = 0 } = useQuery({
    queryKey: ['contact-submissions-count', searchTerm, dateFrom, dateTo],
    queryFn: async () => {
      console.log('üî¢ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫');
      
      let query = supabase
        .from('contact_submissions')
        .select('*', { count: 'exact', head: true });

      if (searchTerm) {
        query = query.or(`first_name.ilike.%${searchTerm}%,last_name.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`);
      }

      if (dateFrom) {
        query = query.gte('submitted_at', dateFrom);
      }

      if (dateTo) {
        query = query.lte('submitted_at', dateTo + 'T23:59:59');
      }

      const { count, error } = await query;

      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á–µ—Ç–∞:', { count, error });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞—è–≤–æ–∫:', error);
        throw new Error(error.message);
      }

      console.log('‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫:', count || 0);
      return count || 0;
    },
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', {
      isLoading,
      error: error?.message,
      submissionsCount: submissions.length,
      totalCount
    });
  }, [isLoading, error, submissions, totalCount]);

  useEffect(() => {
    if (error) {
      console.error('üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞—è–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
        variant: "destructive"
      });
    }
  }, [error, toast]);

  const totalPages = Math.ceil(totalCount / itemsPerPage);

  const handleRefresh = () => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–Ω–æ–ø–∫–µ');
    refetch();
    toast({
      title: "–û–±–Ω–æ–≤–ª–µ–Ω–æ",
      description: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
    });
  };

  const handleExportToExcel = async () => {
    try {
      console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel');
      toast({
        title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...",
        description: "–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
      });

      let query = supabase
        .from('contact_submissions')
        .select('*')
        .order('submitted_at', { ascending: false });

      if (searchTerm) {
        query = query.or(`first_name.ilike.%${searchTerm}%,last_name.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%`);
      }

      if (dateFrom) {
        query = query.gte('submitted_at', dateFrom);
      }

      if (dateTo) {
        query = query.lte('submitted_at', dateTo + 'T23:59:59');
      }

      const { data: allSubmissions, error } = await query;

      console.log('üì• –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', { allSubmissions, error });

      if (error) {
        throw new Error(error.message);
      }

      const exportData = allSubmissions?.map(submission => ({
        '–ò–º—è': submission.first_name,
        '–§–∞–º–∏–ª–∏—è': submission.last_name,
        'Email': submission.email,
        'Telegram': submission.telegram,
        '–¢–µ–ª–µ—Ñ–æ–Ω': submission.phone,
        '–û—Ç–∑—ã–≤': submission.feedback || '',
        '–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏': new Date(submission.submitted_at).toLocaleString('ru-RU')
      })) || [];

      console.log('üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', exportData);

      const ws = XLSX.utils.json_to_sheet(exportData);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, "–ó–∞—è–≤–∫–∏");

      const fileName = `–∑–∞—è–≤–∫–∏_${new Date().toISOString().split('T')[0]}.xlsx`;
      XLSX.writeFile(wb, fileName);

      console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', fileName);

      toast({
        title: "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: `–§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω`
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
        variant: "destructive"
      });
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  console.log('üé® –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ AdminApplications:', {
    isLoading,
    submissionsLength: submissions.length,
    totalCount,
    error: error?.message
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-muted">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
            –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          </h1>
          <p className="text-lg text-muted-foreground">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –∫—É—Ä—Å–∞ "–ë–∏–∑–Ω–µ—Å –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ"
          </p>
        </div>

        {/* Stats */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <Users className="h-8 w-8 text-primary" />
                <div>
                  <p className="text-2xl font-bold">{totalCount}</p>
                  <p className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <Calendar className="h-8 w-8 text-primary" />
                <div>
                  <p className="text-2xl font-bold">{submissions.length}</p>
                  <p className="text-sm text-muted-foreground">–ù–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center gap-4">
                <Download className="h-8 w-8 text-primary" />
                <div>
                  <Button onClick={handleExportToExcel} variant="outline" className="w-full">
                    –°–∫–∞—á–∞—Ç—å Excel
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filters */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Search className="h-5 w-5" />
              –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-4 gap-4">
              <div>
                <Label htmlFor="search">–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –ø–æ—á—Ç–µ</Label>
                <Input
                  id="search"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞..."
                  value={searchTerm}
                  onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1);
                  }}
                />
              </div>
              
              <div>
                <Label htmlFor="dateFrom">–î–∞—Ç–∞ –æ—Ç</Label>
                <Input
                  id="dateFrom"
                  type="date"
                  value={dateFrom}
                  onChange={(e) => {
                    setDateFrom(e.target.value);
                    setCurrentPage(1);
                  }}
                />
              </div>
              
              <div>
                <Label htmlFor="dateTo">–î–∞—Ç–∞ –¥–æ</Label>
                <Input
                  id="dateTo"
                  type="date"
                  value={dateTo}
                  onChange={(e) => {
                    setDateTo(e.target.value);
                    setCurrentPage(1);
                  }}
                />
              </div>
              
              <div className="flex items-end">
                <Button onClick={handleRefresh} variant="outline" className="w-full">
                  <RefreshCw className="h-4 w-4 mr-2" />
                  –û–±–Ω–æ–≤–∏—Ç—å
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Table */}
        <Card>
          <CardHeader>
            <CardTitle>–ó–∞—è–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</CardTitle>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="text-center py-8">
                <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4" />
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫...</p>
              </div>
            ) : submissions.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-muted-foreground">–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                <p className="text-sm text-gray-500 mt-2">
                  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </p>
              </div>
            ) : (
              <>
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>–ò–º—è</TableHead>
                        <TableHead>–§–∞–º–∏–ª–∏—è</TableHead>
                        <TableHead>Email</TableHead>
                        <TableHead>Telegram</TableHead>
                        <TableHead>–¢–µ–ª–µ—Ñ–æ–Ω</TableHead>
                        <TableHead>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {submissions.map((submission) => (
                        <TableRow key={submission.id}>
                          <TableCell className="font-medium">{submission.first_name}</TableCell>
                          <TableCell>{submission.last_name}</TableCell>
                          <TableCell>
                            <a href={`mailto:${submission.email}`} className="text-primary hover:underline">
                              {submission.email}
                            </a>
                          </TableCell>
                          <TableCell>
                            <a href={`https://t.me/${submission.telegram.replace('@', '')}`} target="_blank" rel="noopener noreferrer" className="text-primary hover:underline">
                              {submission.telegram}
                            </a>
                          </TableCell>
                          <TableCell>
                            <a href={`tel:${submission.phone}`} className="text-primary hover:underline">
                              {submission.phone}
                            </a>
                          </TableCell>
                          <TableCell className="text-sm">
                            {formatDate(submission.submitted_at)}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>

                {/* Pagination */}
                {totalPages > 1 && (
                  <div className="mt-6">
                    <Pagination>
                      <PaginationContent>
                        {currentPage > 1 && (
                          <PaginationItem>
                            <PaginationPrevious 
                              onClick={() => setCurrentPage(currentPage - 1)}
                              className="cursor-pointer"
                            />
                          </PaginationItem>
                        )}
                        
                        {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                          let pageNum;
                          if (totalPages <= 5) {
                            pageNum = i + 1;
                          } else if (currentPage <= 3) {
                            pageNum = i + 1;
                          } else if (currentPage >= totalPages - 2) {
                            pageNum = totalPages - 4 + i;
                          } else {
                            pageNum = currentPage - 2 + i;
                          }
                          
                          return (
                            <PaginationItem key={pageNum}>
                              <PaginationLink
                                onClick={() => setCurrentPage(pageNum)}
                                isActive={currentPage === pageNum}
                                className="cursor-pointer"
                              >
                                {pageNum}
                              </PaginationLink>
                            </PaginationItem>
                          );
                        })}
                        
                        {currentPage < totalPages && (
                          <PaginationItem>
                            <PaginationNext 
                              onClick={() => setCurrentPage(currentPage + 1)}
                              className="cursor-pointer"
                            />
                          </PaginationItem>
                        )}
                      </PaginationContent>
                    </Pagination>
                  </div>
                )}
              </>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default AdminApplications;
